{"version":3,"sources":["app/selectors/ui.ts","app/constants/actions.ts","app/actions/cities.ts","app/actions/ui.ts","components/Header/index.tsx","components/AddCity/Body.tsx","components/AddCity/fetchDependencies.ts","components/AddCity/AddCityWindow.tsx","components/AddCity/index.tsx","app/selectors/cities.ts","components/Main/CityCard.tsx","components/Main/index.tsx","app/actions/toasts.ts","app/selectors/toasts.ts","components/Toaster.tsx","App.tsx","app/actions/initApp.ts","theme.ts","app/reducers/cities.ts","app/reducers/toaster.ts","app/reducers/ui.ts","app/reducers/root.ts","app/actions/api.ts","app/actions/multi.ts","app/middleware/index.ts","app/middleware/core/errorLogger.ts","app/middleware/core/multi.ts","app/middleware/core/api.ts","app/constants/urls.ts","app/middleware/app/initApp.ts","app/middleware/app/limitNumberOfCities.ts","app/middleware/app/persistance.ts","app/middleware/app/fetchWeather.ts","app/middleware/app/updateWeather.ts","app/store.ts","index.tsx"],"names":["getUiSlice","state","ui","getIsLoading","requests","getSelectedTheme","theme","getIsAddCityWindowOpen","isAddCityWindowOpen","INIT_APP","MULTI","API_START","API_END","ADD_CITY","FETCH_CURRENT_WEATHER","FETCH_CURRENT_WEATHER_SUCCESS","FETCH_CURRENT_WEATHER_ERROR","SET_CURRENT_WEATHER","DELETE_CITY","UPDATE_ALL_WEATHER","CREATE_TOAST","DELETE_LAST_TOAST","TOGGLE_THEME","ADD_CITY_WINDOW_OPEN","ADD_CITY_WINDOW_CLOSE","addCity","name","lat","lng","type","city","id","fetchCityCurrentWeather","cityId","addCityWindowClose","useStyles","makeStyles","root","flexGrow","title","mapDispatchToProps","updateAllWeather","toggleTheme","connect","isLoading","classes","className","AppBar","position","Toolbar","Typography","variant","IconButton","color","onClick","CircularProgress","height","mapDisptachToProps","undefined","useState","search","setSearch","cities","setCities","useEffect","fetch","then","response","json","cities_data","map","c","index","country","list","filter","toUpperCase","includes","slice","lastItemText","length","TextField","value","onChange","evt","target","fullWidth","autoFocus","margin","InputProps","startAdornment","InputAdornment","List","ListItem","button","appBar","marginLeft","spacing","flex","Transition","React","forwardRef","props","ref","Slide","direction","onClose","open","isMobile","useMediaQuery","Dialog","fullScreen","TransitionComponent","edge","aria-label","DialogContent","right","bottom","openAddCityWindow","Fab","getCitiesSlice","getCitiesIds","Object","keys","getCityById","current","textAlign","fontSize","marginBottom","center","deleteCity","Card","CardHeader","action","CardContent","currentWeather","temperature","Grid","container","justify","forecast","f","i","day","Date","toLocaleString","weekday","item","citiesIds","Box","m","xs","sm","md","createToast","message","timeout","toast","getToastMessage","toasts","getToastsSlice","deleteLastToast","isOpen","setIsOpen","setTimeout","Snackbar","anchorOrigin","vertical","horizontal","onExited","initApp","generatedTheme","createMuiTheme","palette","themeGenerator","ThemeProvider","CssBaseline","initialState","rootReducer","combineReducers","payload","weather","newState","lastMessage","api","url","pending","success","error","method","multi","actions","middleware","next","err","console","log","dispatch","forEach","a","data","options","headers","body","JSON","stringify","encodeURI","catch","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","getState","parse","localStorage","getItem","persistableCities","values","setItem","fetchCityCurrentWeatherSuccess","fetchCityCurrentWeatherError","split","lon","temp","daily","setCityCurrentWeather","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.61b8042a.chunk.js","sourcesContent":["import { AppState } from \"app/types/AppState\";\r\n\r\nconst getUiSlice = (state: AppState) => state.ui;\r\n\r\nexport const getIsLoading = (state: AppState) => getUiSlice(state).requests > 0;\r\n\r\nexport const getSelectedTheme = (state: AppState) => getUiSlice(state).theme;\r\n\r\nexport const getIsAddCityWindowOpen = (state: AppState) =>\r\n  getUiSlice(state).isAddCityWindowOpen;\r\n","export const INIT_APP = \"INIT_APP\";\r\n\r\n// Multi Middleware\r\nexport const MULTI = \"MULTI\";\r\n\r\n// Api middleware\r\nexport const API_START = \"API_START\";\r\nexport const API_END = \"API_END\";\r\n\r\n// City constants\r\nexport const ADD_CITY = \"ADD_CITY\";\r\nexport const FETCH_CURRENT_WEATHER = \"FETCH_CURRENT_WEATHER\";\r\nexport const FETCH_CURRENT_WEATHER_PENDING = \"FETCH_CURRENT_WEATHER_PENDING\";\r\nexport const FETCH_CURRENT_WEATHER_SUCCESS = \"FETCH_CURRENT_WEATHER_SUCCESS\";\r\nexport const FETCH_CURRENT_WEATHER_ERROR = \"FETCH_CURRENT_WEATHER_ERROR\";\r\nexport const SET_CURRENT_WEATHER = \"SET_CURRENT_WEATHER\";\r\nexport const DELETE_CITY = \"DELETE_CITY\";\r\nexport const UPDATE_ALL_WEATHER = \"UPDATE_ALL_WEATHER\";\r\n\r\n// Toasts\r\nexport const CREATE_TOAST = \"CREATE_TOAST\";\r\nexport const DELETE_LAST_TOAST = \"DELETE_LAST_TOAST\";\r\n\r\nexport const TOGGLE_THEME = \"TOGGLE_THEME\";\r\n\r\nexport const ADD_CITY_WINDOW_OPEN = \"ADD_CITY_WINDOW_OPEN\";\r\nexport const ADD_CITY_WINDOW_CLOSE = \"ADD_CITY_WINDOW_CLOSE\";\r\n","import {\r\n  ADD_CITY,\r\n  SET_CURRENT_WEATHER,\r\n  FETCH_CURRENT_WEATHER,\r\n  FETCH_CURRENT_WEATHER_PENDING,\r\n  FETCH_CURRENT_WEATHER_SUCCESS,\r\n  FETCH_CURRENT_WEATHER_ERROR,\r\n  DELETE_CITY,\r\n  UPDATE_ALL_WEATHER,\r\n} from \"app/constants/actions\";\r\nimport { City } from \"app/types/City\";\r\nimport { OpOneCall } from \"app/types/op/types\";\r\nimport { Weather } from \"app/types/Weather\";\r\n\r\nexport interface AddCity {\r\n  type: typeof ADD_CITY;\r\n  city: City;\r\n}\r\n\r\nexport const addCity = (name: string, lat: number, lng: number): AddCity => ({\r\n  type: ADD_CITY,\r\n  city: { id: `${lat},${lng}`, name, lat, lng },\r\n});\r\n\r\nexport interface SetCityCurrentWeather {\r\n  type: typeof SET_CURRENT_WEATHER;\r\n  payload: {\r\n    cityId: string;\r\n    weather: Weather;\r\n    forecast: Weather[];\r\n  };\r\n}\r\n\r\nexport const setCityCurrentWeather = (\r\n  cityId: string,\r\n  weather: Weather,\r\n  forecast: Weather[]\r\n): SetCityCurrentWeather => ({\r\n  type: SET_CURRENT_WEATHER,\r\n  payload: {\r\n    cityId,\r\n    weather,\r\n    forecast,\r\n  },\r\n});\r\n\r\ninterface FetchCityCurrentWeather {\r\n  type: typeof FETCH_CURRENT_WEATHER;\r\n  cityId: string;\r\n}\r\n\r\nexport const fetchCityCurrentWeather = (\r\n  cityId: string\r\n): FetchCityCurrentWeather => ({\r\n  type: FETCH_CURRENT_WEATHER,\r\n  cityId,\r\n});\r\n\r\ninterface FetchCityCurrentWeatherPending {\r\n  type: typeof FETCH_CURRENT_WEATHER_PENDING;\r\n  id: string;\r\n}\r\n\r\nexport const fetchCityCurrentWeatherPending = (\r\n  id: string\r\n): FetchCityCurrentWeatherPending => ({\r\n  type: FETCH_CURRENT_WEATHER_PENDING,\r\n  id,\r\n});\r\n\r\ninterface FetchCityCurrentWeatherSuccess {\r\n  type: typeof FETCH_CURRENT_WEATHER_SUCCESS;\r\n  cityId: string;\r\n  payload: {\r\n    data?: OpOneCall;\r\n  };\r\n}\r\nexport const fetchCityCurrentWeatherSuccess = (\r\n  cityId: string\r\n): FetchCityCurrentWeatherSuccess => ({\r\n  type: FETCH_CURRENT_WEATHER_SUCCESS,\r\n  cityId,\r\n  payload: {\r\n    data: undefined,\r\n  },\r\n});\r\n\r\ninterface FetchCityCurrentWeatherError {\r\n  type: typeof FETCH_CURRENT_WEATHER_ERROR;\r\n  cityId: string;\r\n  payload: {\r\n    data: any;\r\n  };\r\n}\r\n\r\nexport const fetchCityCurrentWeatherError = (\r\n  cityId: string\r\n): FetchCityCurrentWeatherError => ({\r\n  type: FETCH_CURRENT_WEATHER_ERROR,\r\n  cityId,\r\n  payload: {\r\n    data: undefined,\r\n  },\r\n});\r\n\r\ninterface DeleteCity {\r\n  type: typeof DELETE_CITY;\r\n  cityId: string;\r\n}\r\n\r\nexport const deleteCity = (cityId: string): DeleteCity => ({\r\n  type: DELETE_CITY,\r\n  cityId,\r\n});\r\n\r\ninterface UpdateAllWeather {\r\n  type: typeof UPDATE_ALL_WEATHER;\r\n}\r\n\r\nexport const updateAllWeather = (): UpdateAllWeather => ({\r\n  type: UPDATE_ALL_WEATHER,\r\n});\r\n\r\nexport type CityActions =\r\n  | AddCity\r\n  | SetCityCurrentWeather\r\n  | FetchCityCurrentWeather\r\n  | FetchCityCurrentWeatherPending\r\n  | FetchCityCurrentWeatherSuccess\r\n  | FetchCityCurrentWeatherError\r\n  | UpdateAllWeather\r\n  | DeleteCity;\r\n","import {\r\n  ADD_CITY_WINDOW_CLOSE,\r\n  ADD_CITY_WINDOW_OPEN,\r\n  TOGGLE_THEME,\r\n} from \"app/constants/actions\";\r\n\r\ninterface ToggleTheme {\r\n  type: typeof TOGGLE_THEME;\r\n}\r\n\r\nexport const toggleTheme = (): ToggleTheme => ({\r\n  type: TOGGLE_THEME,\r\n});\r\n\r\ninterface AddCityWindowOpen {\r\n  type: typeof ADD_CITY_WINDOW_OPEN;\r\n}\r\n\r\nexport const addCityWindowOpen = (): AddCityWindowOpen => ({\r\n  type: ADD_CITY_WINDOW_OPEN,\r\n});\r\n\r\ninterface AddCityWindowClose {\r\n  type: typeof ADD_CITY_WINDOW_CLOSE;\r\n}\r\n\r\nexport const addCityWindowClose = (): AddCityWindowClose => ({\r\n  type: ADD_CITY_WINDOW_CLOSE,\r\n});\r\n\r\nexport type UiActions = ToggleTheme | AddCityWindowOpen | AddCityWindowClose;\r\n","import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  makeStyles,\r\n  IconButton,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport ToggleIcon from \"@material-ui/icons/Brightness4\";\r\nimport { connect } from \"react-redux\";\r\nimport { getIsLoading } from \"app/selectors/ui\";\r\nimport { AppState } from \"app/types/AppState\";\r\nimport { updateAllWeather } from \"app/actions/cities\";\r\nimport { toggleTheme } from \"app/actions/ui\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isLoading: boolean;\r\n  updateAllWeather: typeof updateAllWeather;\r\n  toggleTheme: typeof toggleTheme;\r\n}\r\n\r\nconst Header = ({ isLoading, updateAllWeather, toggleTheme }: Props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Weather\r\n          </Typography>\r\n          <IconButton color=\"inherit\" onClick={toggleTheme}>\r\n            <ToggleIcon />\r\n          </IconButton>\r\n          {isLoading ? (\r\n            <CircularProgress color=\"secondary\" />\r\n          ) : (\r\n            <IconButton color=\"inherit\" onClick={updateAllWeather}>\r\n              <RefreshIcon />\r\n            </IconButton>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  isLoading: getIsLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = { updateAllWeather, toggleTheme };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React, { useState, ChangeEvent, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport { CityDto, fetchDependencies } from \"./fetchDependencies\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { connect } from \"react-redux\";\r\nimport { addCity } from \"app/actions/cities\";\r\nimport { addCityWindowClose } from \"app/actions/ui\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    height: \"60vh\",\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  addCity: typeof addCity;\r\n  addCityWindowClose: typeof addCityWindowClose;\r\n}\r\n\r\nconst Body = ({ addCity, addCityWindowClose }: Props) => {\r\n  const classes = useStyles();\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const [cities, setCities] = useState<CityDto[]>([]);\r\n\r\n  const handleOnChange = (\r\n    evt: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\r\n  ) => {\r\n    setSearch(evt.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDependencies().then(setCities);\r\n  }, []);\r\n\r\n  const maxNumberDisplayed = 25;\r\n  const list = cities\r\n    .filter((c) => c.name.toUpperCase().includes(search.toUpperCase()))\r\n    .slice(0, maxNumberDisplayed);\r\n\r\n  const lastItemText =\r\n    list.length === 0\r\n      ? \"Not found\"\r\n      : list.length < maxNumberDisplayed\r\n      ? \"\"\r\n      : \"...\";\r\n\r\n  const handleAdd = (id: number) => () => {\r\n    const city = cities[id];\r\n    addCity(city.name, city.lat, city.lng);\r\n    addCityWindowClose();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TextField\r\n        value={search}\r\n        onChange={handleOnChange}\r\n        fullWidth\r\n        autoFocus\r\n        margin=\"normal\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n\r\n      <List>\r\n        {list.map((c) => (\r\n          <ListItem\r\n            key={c.id}\r\n            onClick={handleAdd(c.id)}\r\n            button\r\n          >{`${c.name}, ${c.country}`}</ListItem>\r\n        ))}\r\n        <ListItem>{lastItemText}</ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDisptachToProps = {\r\n  addCity,\r\n  addCityWindowClose,\r\n};\r\n\r\nexport default connect(undefined, mapDisptachToProps)(Body);\r\n","type DataTuple = [string, string, number, number];\r\n\r\nexport interface CityDto {\r\n  id: number;\r\n  name: string;\r\n  country: string;\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\nexport const fetchDependencies = () => {\r\n  return fetch(\"cities.json\")\r\n    .then((response) => response.json())\r\n    .then((cities_data: DataTuple[]) => {\r\n      const cities: CityDto[] = (cities_data as DataTuple[]).map(\r\n        (c, index) => ({\r\n          id: index,\r\n          name: c[0],\r\n          country: c[1],\r\n          lat: c[2],\r\n          lng: c[3],\r\n        })\r\n      );\r\n      return cities;\r\n    });\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  IconButton,\r\n  Typography,\r\n  AppBar,\r\n  makeStyles,\r\n  Slide,\r\n  Toolbar,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Body from \"./Body\";\r\nimport { AppState } from \"app/types/AppState\";\r\nimport { addCityWindowClose } from \"app/actions/ui\";\r\nimport { connect } from \"react-redux\";\r\nimport { getIsAddCityWindowOpen } from \"app/selectors/ui\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  open: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  //@ts-ignore\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst AddCityWindow = ({ title, open, onClose }: Props) => {\r\n  const classes = useStyles();\r\n  const isMobile = useMediaQuery(\"(max-width: 769px)\");\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      fullScreen={isMobile}\r\n      fullWidth={true}\r\n      onClose={onClose}\r\n      TransitionComponent={Transition as any}\r\n    >\r\n      <AppBar className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            onClick={onClose}\r\n            aria-label=\"close\"\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <DialogContent>\r\n        <Body />\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  open: getIsAddCityWindowOpen(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onClose: addCityWindowClose,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCityWindow);\r\n","import React from \"react\";\r\nimport AddCityWindow from \"./AddCityWindow\";\r\nimport { Fab, makeStyles } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { addCityWindowOpen } from \"app/actions/ui\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    position: \"fixed\",\r\n    right: theme.spacing(3),\r\n    bottom: theme.spacing(3),\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  openAddCityWindow: typeof addCityWindowOpen;\r\n}\r\n\r\nconst AddCity = ({ openAddCityWindow }: Props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Fab\r\n        onClick={openAddCityWindow}\r\n        color=\"primary\"\r\n        aria-label=\"add\"\r\n        className={classes.button}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n      <AddCityWindow title=\"Choose city\" />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  openAddCityWindow: addCityWindowOpen,\r\n};\r\n\r\nexport default connect(undefined, mapDispatchToProps)(AddCity);\r\n","import { AppState } from \"app/types/AppState\";\r\n\r\nconst getCitiesSlice = (state: AppState) => state.cities;\r\n\r\nexport const getCitiesIds = (state: AppState) =>\r\n  Object.keys(getCitiesSlice(state));\r\n\r\nexport const getCityById = (state: AppState, cityId: string) =>\r\n  getCitiesSlice(state)[cityId];\r\n","import {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { getCityById } from \"app/selectors/cities\";\r\nimport { AppState } from \"app/types/AppState\";\r\nimport { City } from \"app/types/City\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { deleteCity } from \"app/actions/cities\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  current: {\r\n    textAlign: \"center\",\r\n    fontSize: \"2em\",\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  center: {\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  id: string;\r\n  city: City;\r\n  deleteCity: typeof deleteCity;\r\n}\r\n\r\nconst CityCard = ({ city, deleteCity }: Props) => {\r\n  const classes = useStyles();\r\n\r\n  const handleDelete = () => deleteCity(city.id);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        title={city.name}\r\n        action={\r\n          <IconButton aria-label=\"delete-city\" onClick={handleDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        }\r\n      />\r\n      <CardContent>\r\n        {city.currentWeather ? (\r\n          <div>\r\n            <div className={classes.current}>\r\n              {city.currentWeather?.temperature}\r\n            </div>\r\n            <Grid container spacing={2} justify=\"center\">\r\n              {city.forecast?.slice(1, 6).map((f, i) => {\r\n                const date = new Date(\r\n                  +new Date() + (i + 1) * 24 * 60 * 60 * 1000\r\n                );\r\n\r\n                const day = date.toLocaleString(\"en-us\", { weekday: \"short\" });\r\n                return (\r\n                  <Grid key={i} item>\r\n                    <div className={classes.center}>{day}</div>\r\n                    <div className={classes.center}>{f.temperature}</div>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n          </div>\r\n        ) : (\r\n          \"Loading\"\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState, { id }: { id: string }) => ({\r\n  city: getCityById(state, id),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  deleteCity,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CityCard);\r\n","import { Box, Grid } from \"@material-ui/core\";\r\nimport { getCitiesIds } from \"app/selectors/cities\";\r\nimport { AppState } from \"app/types/AppState\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CityCard from \"./CityCard\";\r\n\r\ninterface Props {\r\n  citiesIds: ReturnType<typeof getCitiesIds>;\r\n}\r\n\r\nexport const Main = ({ citiesIds }: Props) => {\r\n  return (\r\n    <Box m={4}>\r\n      <Grid container spacing={2}>\r\n        {citiesIds.map((cityId) => (\r\n          <Grid item key={cityId} xs={12} sm={6} md={4}>\r\n            <CityCard id={cityId} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  citiesIds: getCitiesIds(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Main);\r\n","import { CREATE_TOAST, DELETE_LAST_TOAST } from \"app/constants/actions\";\r\nimport { Toast } from \"app/types/Toast\";\r\n\r\ninterface CreateToast {\r\n  type: typeof CREATE_TOAST;\r\n  toast: Toast;\r\n}\r\n\r\nexport const createToast = (message: string, timeout = 3000): CreateToast => ({\r\n  type: CREATE_TOAST,\r\n  toast: { message, timeout },\r\n});\r\n\r\ninterface DeleteLastToast {\r\n  type: typeof DELETE_LAST_TOAST;\r\n}\r\n\r\nexport const deleteLastToast = (): DeleteLastToast => ({\r\n  type: DELETE_LAST_TOAST,\r\n});\r\n\r\nexport type ToastActions = CreateToast | DeleteLastToast;\r\n","import { AppState } from \"app/types/AppState\";\r\nimport { Toast } from \"app/types/Toast\";\r\n\r\nconst getToastsSlice = (state: AppState) => state.toasts;\r\n\r\nexport const getToastMessage = (state: AppState): Toast | null => {\r\n  const toasts = getToastsSlice(state);\r\n  if (toasts.length) {\r\n    return toasts[0];\r\n  }\r\n  return null;\r\n};\r\n","import { Snackbar } from \"@material-ui/core\";\r\nimport { deleteLastToast } from \"app/actions/toasts\";\r\nimport { getToastMessage } from \"app/selectors/toasts\";\r\nimport { AppState } from \"app/types/AppState\";\r\nimport { Toast } from \"app/types/Toast\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface Props {\r\n  toast: Toast | null;\r\n  deleteLastToast: typeof deleteLastToast;\r\n}\r\n\r\nconst Toaster = ({ toast, deleteLastToast }: Props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (toast !== null) {\r\n      setIsOpen(true);\r\n      setTimeout(() => setIsOpen(false), toast.timeout);\r\n    } else {\r\n      setIsOpen(false);\r\n    }\r\n  }, [toast]);\r\n\r\n  return (\r\n    <Snackbar\r\n      message={toast?.message}\r\n      open={isOpen}\r\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\r\n      onExited={() => deleteLastToast()}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  toast: getToastMessage(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  deleteLastToast,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Toaster);\r\n","import React, { useEffect } from \"react\";\r\nimport Header from \"components/Header\";\r\nimport AddCity from \"components/AddCity\";\r\nimport Main from \"components/Main\";\r\nimport { initApp } from \"app/actions/initApp\";\r\nimport { connect } from \"react-redux\";\r\nimport Toaster from \"components/Toaster\";\r\nimport { CssBaseline, ThemeProvider } from \"@material-ui/core\";\r\nimport { AppState } from \"app/types/AppState\";\r\nimport { getSelectedTheme } from \"app/selectors/ui\";\r\nimport { Theme } from \"app/types/Theme\";\r\nimport { themeGenerator } from \"theme\";\r\n\r\ninterface Props {\r\n  initApp: typeof initApp;\r\n  theme: Theme;\r\n}\r\n\r\nfunction App({ initApp, theme }: Props) {\r\n  useEffect(() => {\r\n    initApp();\r\n  }, [initApp]);\r\n\r\n  const generatedTheme = themeGenerator(theme);\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={generatedTheme}>\r\n        <CssBaseline />\r\n        <Header />\r\n        <Main />\r\n        <AddCity />\r\n        <Toaster />\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  theme: getSelectedTheme(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  initApp,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { INIT_APP } from \"app/constants/actions\";\r\n\r\nexport interface InitApp {\r\n  type: typeof INIT_APP;\r\n}\r\n\r\nexport const initApp = (): InitApp => ({\r\n  type: INIT_APP,\r\n});\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { Theme } from \"app/types/Theme\";\r\n\r\nexport const themeGenerator = (theme: Theme) =>\r\n  createMuiTheme({\r\n    palette: {\r\n      type: theme,\r\n    },\r\n  });\r\n","import {\r\n  ADD_CITY,\r\n  DELETE_CITY,\r\n  SET_CURRENT_WEATHER,\r\n} from \"app/constants/actions\";\r\nimport { AppAction } from \"app/types/AppAction\";\r\nimport { City } from \"app/types/City\";\r\n\r\ninterface CitiesState {\r\n  [prop: string]: City;\r\n}\r\n\r\nconst initialState: CitiesState = {};\r\n\r\nexport const citiesReducer = (\r\n  state = initialState,\r\n  action: AppAction\r\n): CitiesState => {\r\n  switch (action.type) {\r\n    case ADD_CITY: {\r\n      const city = action.city;\r\n      return { ...state, [city.id]: city };\r\n    }\r\n\r\n    case SET_CURRENT_WEATHER: {\r\n      const { cityId, weather, forecast } = action.payload;\r\n      return {\r\n        ...state,\r\n        [cityId]: { ...state[cityId], currentWeather: weather, forecast },\r\n      };\r\n    }\r\n\r\n    case DELETE_CITY: {\r\n      const cityId = action.cityId;\r\n      const newState = { ...state };\r\n      delete newState[cityId];\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { CREATE_TOAST, DELETE_LAST_TOAST } from \"app/constants/actions\";\r\nimport { AppAction } from \"app/types/AppAction\";\r\nimport { Toast } from \"app/types/Toast\";\r\n\r\ntype ToasterState = Toast[];\r\n\r\nconst initialState: ToasterState = [] as Toast[];\r\n\r\nexport const toasterReducer = (\r\n  state = initialState,\r\n  action: AppAction\r\n): ToasterState => {\r\n  switch (action.type) {\r\n    case CREATE_TOAST: {\r\n      const toast = action.toast;\r\n      const lastMessage = state[state.length - 1]?.message;\r\n      if (lastMessage === toast.message) {\r\n        return state;\r\n      }\r\n      return [...state, toast];\r\n    }\r\n\r\n    case DELETE_LAST_TOAST:\r\n      return state.slice(1);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  API_START,\r\n  API_END,\r\n  TOGGLE_THEME,\r\n  ADD_CITY_WINDOW_OPEN,\r\n  ADD_CITY_WINDOW_CLOSE,\r\n} from \"app/constants/actions\";\r\nimport { AppAction } from \"app/types/AppAction\";\r\nimport { Theme } from \"app/types/Theme\";\r\n\r\ninterface UiState {\r\n  requests: number;\r\n  theme: Theme;\r\n  isAddCityWindowOpen: boolean;\r\n}\r\n\r\nconst initialState: UiState = {\r\n  requests: 0,\r\n  theme: \"light\",\r\n  isAddCityWindowOpen: false,\r\n};\r\n\r\nexport const uiReducer = (state = initialState, action: AppAction): UiState => {\r\n  switch (action.type) {\r\n    case API_START:\r\n      return { ...state, requests: state.requests + 1 };\r\n\r\n    case API_END:\r\n      return { ...state, requests: state.requests - 1 };\r\n\r\n    case TOGGLE_THEME:\r\n      return { ...state, theme: state.theme === \"light\" ? \"dark\" : \"light\" };\r\n\r\n    case ADD_CITY_WINDOW_OPEN:\r\n      return { ...state, isAddCityWindowOpen: true };\r\n\r\n    case ADD_CITY_WINDOW_CLOSE:\r\n      return { ...state, isAddCityWindowOpen: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { citiesReducer } from \"./cities\";\r\nimport { toasterReducer } from \"./toaster\";\r\nimport { uiReducer } from \"./ui\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  cities: citiesReducer,\r\n  ui: uiReducer,\r\n  toasts: toasterReducer,\r\n});\r\n","import { API_END, API_START } from \"app/constants/actions\";\r\nimport { AppAction, ActionConstant } from \"app/types/AppAction\";\r\n\r\ntype method = \"GET\" | \"POST\";\r\n\r\nexport interface ActionWithDataPayload {\r\n  type: ActionConstant;\r\n  payload: {\r\n    data?: any;\r\n  };\r\n}\r\n\r\nexport interface ApiStart {\r\n  type: typeof API_START;\r\n  payload: {\r\n    url: string;\r\n    method: method;\r\n    data?: {};\r\n    pending: AppAction;\r\n    success: ActionWithDataPayload;\r\n    error: ActionWithDataPayload;\r\n  };\r\n}\r\n\r\nconst get: (\r\n  url: string,\r\n  pending: AppAction,\r\n  success: ActionWithDataPayload,\r\n  error: ActionWithDataPayload\r\n) => ApiStart = (url, pending, success, error) => ({\r\n  type: API_START,\r\n  payload: { url, method: \"GET\", pending, success, error },\r\n});\r\n\r\nexport const api = {\r\n  get,\r\n};\r\n\r\nexport interface ApiEnd {\r\n  type: typeof API_END;\r\n}\r\n\r\nexport const apiEnd = (): ApiEnd => ({ type: API_END });\r\n\r\nexport type ApiActions = ApiStart | ApiEnd;\r\n","import { MULTI } from \"app/constants/actions\";\r\nimport { AppAction } from \"app/types/AppAction\";\r\n\r\nexport interface Multi {\r\n  type: typeof MULTI;\r\n  actions: AppAction[];\r\n}\r\n\r\nexport const multi = (actions: AppAction[]): Multi => ({\r\n  type: MULTI,\r\n  actions,\r\n});\r\n","import { fetchWeatherMdl } from \"./app/fetchWeather\";\r\nimport { apiMdl } from \"./core/api\";\r\nimport { multiMdl } from \"./core/multi\";\r\nimport { updateWeatherMdl } from \"./app/updateWeather\";\r\nimport { initAppMdl } from \"./app/initApp\";\r\nimport { limitNumberOfCitiesMdl } from \"./app/limitNumberOfCities\";\r\nimport { persistanceMdl } from \"./app/persistance\";\r\nimport { errorLoggerMdl } from \"./core/errorLogger\";\r\n\r\nexport const middleware = [\r\n  errorLoggerMdl,\r\n  multiMdl,\r\n  apiMdl,\r\n  initAppMdl,\r\n  limitNumberOfCitiesMdl,\r\n  persistanceMdl,\r\n  fetchWeatherMdl,\r\n  updateWeatherMdl,\r\n];\r\n","import { Middleware } from \"../Middleware\";\r\n\r\nexport const errorLoggerMdl: Middleware = () => (next) => (action) => {\r\n  try {\r\n    next(action);\r\n  } catch (err) {\r\n    // TODO add logging service\r\n    console.log(err);\r\n  }\r\n};\r\n","import { MULTI } from \"app/constants/actions\";\r\nimport { Middleware } from \"../Middleware\";\r\n\r\nexport const multiMdl: Middleware = ({ dispatch }) => (next) => (action) => {\r\n  next(action);\r\n  if (action.type === MULTI) {\r\n    action.actions.forEach((a) => dispatch(a));\r\n  }\r\n};\r\n","import { API_START } from \"app/constants/actions\";\r\nimport { Middleware } from \"../Middleware\";\r\nimport { API_URL } from \"app/constants/urls\";\r\nimport { AppAction } from \"app/types/AppAction\";\r\nimport { apiEnd } from \"app/actions/api\";\r\n\r\nexport const apiMdl: Middleware = ({ dispatch }) => (next) => (action) => {\r\n  next(action);\r\n\r\n  if (action.type === API_START) {\r\n    const { method, pending, success, error, data, url } = action.payload;\r\n    const payload = action.payload;\r\n    const options = {\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data) || undefined,\r\n    };\r\n\r\n    dispatch(pending);\r\n    fetch(\r\n      encodeURI(\r\n        API_URL + url + \"&units=metric&appid=5d2145b1e3153ce2a87bbad571a98ba4\"\r\n      ),\r\n      options\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        payload.success.payload.data = data;\r\n        dispatch(success as AppAction);\r\n      })\r\n      .catch((err) => {\r\n        error.payload.data = err;\r\n        dispatch(error as AppAction);\r\n      })\r\n      .then(() => dispatch(apiEnd()));\r\n  }\r\n};\r\n","export const API_URL =\r\n  \"https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5\";\r\n","import { addCity } from \"app/actions/cities\";\r\nimport { createToast } from \"app/actions/toasts\";\r\nimport { INIT_APP } from \"app/constants/actions\";\r\nimport { Middleware } from \"../Middleware\";\r\n\r\nexport const initAppMdl: Middleware = ({ dispatch }) => (next) => (action) => {\r\n  next(action);\r\n\r\n  if (action.type === INIT_APP) {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        dispatch(addCity(\"Current\", latitude, longitude));\r\n      },\r\n      () => {\r\n        dispatch(createToast(\"Could not access current location\"));\r\n      }\r\n    );\r\n  }\r\n};\r\n","import { createToast } from \"app/actions/toasts\";\r\nimport { ADD_CITY } from \"app/constants/actions\";\r\nimport { getCitiesIds } from \"app/selectors/cities\";\r\nimport { Middleware } from \"../Middleware\";\r\n\r\nexport const limitNumberOfCitiesMdl: Middleware = ({ dispatch, getState }) => (\r\n  next\r\n) => (action) => {\r\n  const maxNumberOfCities = 6;\r\n\r\n  if (action.type === ADD_CITY) {\r\n    const numberOfCities = getCitiesIds(getState()).length;\r\n    if (numberOfCities === maxNumberOfCities) {\r\n      dispatch(createToast(\"Only 6 cities allowed\"));\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  next(action);\r\n};\r\n","import { addCity } from \"app/actions/cities\";\r\nimport { multi } from \"app/actions/multi\";\r\nimport { ADD_CITY, DELETE_CITY, INIT_APP } from \"app/constants/actions\";\r\nimport { City } from \"app/types/City\";\r\nimport { Middleware } from \"../Middleware\";\r\n\r\nexport const persistanceMdl: Middleware = ({ dispatch, getState }) => (\r\n  next\r\n) => (action) => {\r\n  next(action);\r\n\r\n  if (action.type === INIT_APP) {\r\n    const cities = JSON.parse(localStorage.getItem(\"cities\") as string) as\r\n      | City[]\r\n      | null;\r\n    if (cities) {\r\n      dispatch(\r\n        multi(cities.map((city) => addCity(city.name, city.lat, city.lng)))\r\n      );\r\n    }\r\n  }\r\n\r\n  if (action.type === ADD_CITY || action.type === DELETE_CITY) {\r\n    const cities = Object.values(getState().cities);\r\n    const persistableCities = cities.filter((city) => city.name !== \"Current\");\r\n    localStorage.setItem(\"cities\", JSON.stringify(persistableCities));\r\n  }\r\n};\r\n","import {\r\n  ADD_CITY,\r\n  FETCH_CURRENT_WEATHER,\r\n  FETCH_CURRENT_WEATHER_ERROR,\r\n  FETCH_CURRENT_WEATHER_SUCCESS,\r\n} from \"app/constants/actions\";\r\nimport { Middleware } from \"../Middleware\";\r\nimport { api } from \"app/actions/api\";\r\nimport {\r\n  fetchCityCurrentWeather,\r\n  fetchCityCurrentWeatherPending,\r\n  fetchCityCurrentWeatherSuccess,\r\n  fetchCityCurrentWeatherError,\r\n  setCityCurrentWeather,\r\n} from \"app/actions/cities\";\r\nimport { Weather } from \"app/types/Weather\";\r\nimport { getCityById } from \"app/selectors/cities\";\r\nimport { createToast } from \"app/actions/toasts\";\r\n\r\nexport const fetchWeatherMdl: Middleware = ({ dispatch, getState }) => (\r\n  next\r\n) => (action) => {\r\n  next(action);\r\n\r\n  if (action.type === ADD_CITY) {\r\n    dispatch(fetchCityCurrentWeather(action.city.id));\r\n  }\r\n\r\n  if (action.type === FETCH_CURRENT_WEATHER) {\r\n    const { cityId } = action;\r\n    const pending = fetchCityCurrentWeatherPending(cityId);\r\n    const success = fetchCityCurrentWeatherSuccess(cityId);\r\n    const error = fetchCityCurrentWeatherError(cityId);\r\n\r\n    const [lat, lon] = cityId.split(\",\");\r\n    dispatch(\r\n      api.get(\r\n        `/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts`,\r\n        pending,\r\n        success,\r\n        error\r\n      )\r\n    );\r\n  }\r\n\r\n  if (action.type === FETCH_CURRENT_WEATHER_ERROR) {\r\n    dispatch(createToast(\"Could not update weather\"));\r\n  }\r\n\r\n  if (action.type === FETCH_CURRENT_WEATHER_SUCCESS) {\r\n    const {\r\n      cityId,\r\n      payload: { data },\r\n    } = action;\r\n    const weather: Weather = { temperature: data!.current.temp };\r\n    const forecast: Weather[] = data!.daily.map((f) => ({\r\n      temperature: f.temp.day,\r\n    }));\r\n\r\n    const cityExists = getCityById(getState(), cityId);\r\n    if (cityExists) {\r\n      dispatch(setCityCurrentWeather(cityId, weather, forecast));\r\n    }\r\n  }\r\n};\r\n","import { fetchCityCurrentWeather } from \"app/actions/cities\";\r\nimport { multi } from \"app/actions/multi\";\r\nimport { UPDATE_ALL_WEATHER } from \"app/constants/actions\";\r\nimport { getCitiesIds } from \"app/selectors/cities\";\r\nimport { Middleware } from \"../Middleware\";\r\n\r\nexport const updateWeatherMdl: Middleware = ({ dispatch, getState }) => (\r\n  next\r\n) => (action) => {\r\n  next(action);\r\n\r\n  if (action.type === UPDATE_ALL_WEATHER) {\r\n    dispatch(\r\n      multi(\r\n        getCitiesIds(getState()).map((cityId) =>\r\n          fetchCityCurrentWeather(cityId)\r\n        )\r\n      )\r\n    );\r\n  }\r\n};\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { rootReducer } from \"app/reducers/root\";\r\nimport { middleware } from \"app/middleware\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"fontsource-roboto\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  const { worker } = require(\"./mocks/browser\");\r\n  worker.start();\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <CssBaseline />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}