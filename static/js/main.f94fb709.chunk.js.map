{"version":3,"sources":["app/selectors/ui.ts","app/constants/actions.ts","app/actions/cities.ts","components/Header/index.tsx","components/AddCity/AddCityWindow.tsx","components/AddCity/Body.tsx","components/AddCity/fetchDependencies.ts","components/AddCity/index.tsx","app/selectors/cities.ts","components/Main/CityCard.tsx","components/Main/index.tsx","App.tsx","app/actions/initApp.ts","app/reducers/cities.ts","app/reducers/ui.ts","app/reducers/root.ts","app/actions/api.ts","app/middleware/index.ts","app/middleware/core/multi.ts","app/middleware/core/api.ts","app/constants/urls.ts","app/middleware/app/initApp.ts","app/middleware/app/fetchWeather.ts","app/middleware/app/updateWeather.ts","app/actions/multi.ts","app/store.ts","index.tsx"],"names":["getIsLoading","state","ui","getUiSlice","requests","INIT_APP","MULTI","API_START","API_END","ADD_CITY","FETCH_CURRENT_WEATHER","FETCH_CURRENT_WEATHER_SUCCESS","SET_CURRENT_WEATHER","DELETE_CITY","UPDATE_ALL_WEATHER","addCity","name","lat","lng","type","city","id","fetchCityCurrentWeather","cityId","useStyles","makeStyles","root","flexGrow","title","mapDispatchToProps","updateAllWeather","connect","isLoading","classes","className","AppBar","position","Toolbar","Typography","variant","CircularProgress","color","IconButton","onClick","theme","appBar","marginLeft","spacing","flex","Transition","React","forwardRef","props","ref","Slide","direction","AddCityWindow","open","onClose","children","isMobile","useMediaQuery","Dialog","fullScreen","fullWidth","TransitionComponent","edge","aria-label","DialogContent","height","mapDisptachToProps","undefined","useState","search","setSearch","cities","setCities","useEffect","fetch","then","response","json","cities_data","map","c","index","country","list","filter","toUpperCase","includes","slice","lastItemText","length","TextField","value","onChange","evt","target","autoFocus","margin","InputProps","startAdornment","InputAdornment","List","ListItem","button","right","bottom","AddCity","setOpen","Fab","getCitiesSlice","getCitiesIds","Object","keys","getCityById","current","textAlign","fontSize","marginBottom","deleteCity","Card","CardHeader","action","CardContent","currentWeather","temperature","Grid","container","justify","forecast","f","i","item","citiesIds","Box","m","xs","md","initApp","initialState","rootReducer","combineReducers","payload","weather","newState","api","url","pending","success","error","method","middleware","dispatch","next","actions","forEach","a","data","options","headers","body","JSON","stringify","encodeURI","catch","err","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","getState","fetchCityCurrentWeatherSuccess","fetchCityCurrentWeatherError","split","lon","temp","daily","day","setCityCurrentWeather","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","ReactDOM","render","StrictMode","CssBaseline","store","document","getElementById"],"mappings":"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","file":"static/js/main.f94fb709.chunk.js","sourcesContent":["import { AppState } from \"app/types/AppState\";\r\n\r\nconst getUiSlice = (state: AppState) => state.ui;\r\n\r\nexport const getIsLoading = (state: AppState) => getUiSlice(state).requests > 0;\r\n","export const INIT_APP = \"INIT_APP\";\r\n\r\n// Multi Middleware\r\nexport const MULTI = \"MULTI\";\r\n\r\n// Api middleware\r\nexport const API_START = \"API_START\";\r\nexport const API_END = \"API_END\";\r\n\r\n// City constants\r\nexport const ADD_CITY = \"ADD_CITY\";\r\nexport const FETCH_CURRENT_WEATHER = \"FETCH_CURRENT_WEATHER\";\r\nexport const FETCH_CURRENT_WEATHER_PENDING = \"FETCH_CURRENT_WEATHER_PENDING\";\r\nexport const FETCH_CURRENT_WEATHER_SUCCESS = \"FETCH_CURRENT_WEATHER_SUCCESS\";\r\nexport const FETCH_CURRENT_WEATHER_ERROR = \"FETCH_CURRENT_WEATHER_ERROR\";\r\nexport const SET_CURRENT_WEATHER = \"SET_CURRENT_WEATHER\";\r\nexport const DELETE_CITY = \"DELETE_CITY\";\r\nexport const UPDATE_ALL_WEATHER = \"UPDATE_ALL_WEATHER\";\r\n","import {\r\n  ADD_CITY,\r\n  SET_CURRENT_WEATHER,\r\n  FETCH_CURRENT_WEATHER,\r\n  FETCH_CURRENT_WEATHER_PENDING,\r\n  FETCH_CURRENT_WEATHER_SUCCESS,\r\n  FETCH_CURRENT_WEATHER_ERROR,\r\n  DELETE_CITY,\r\n  UPDATE_ALL_WEATHER,\r\n} from \"app/constants/actions\";\r\nimport { City } from \"app/types/City\";\r\nimport { OpOneCall } from \"app/types/op/types\";\r\nimport { Weather } from \"app/types/Weather\";\r\n\r\nexport interface AddCity {\r\n  type: typeof ADD_CITY;\r\n  city: City;\r\n}\r\n\r\nexport const addCity = (name: string, lat: number, lng: number): AddCity => ({\r\n  type: ADD_CITY,\r\n  city: { id: `${lat},${lng}`, name, lat, lng },\r\n});\r\n\r\nexport interface SetCityCurrentWeather {\r\n  type: typeof SET_CURRENT_WEATHER;\r\n  payload: {\r\n    cityId: string;\r\n    weather: Weather;\r\n    forecast: Weather[];\r\n  };\r\n}\r\n\r\nexport const setCityCurrentWeather = (\r\n  cityId: string,\r\n  weather: Weather,\r\n  forecast: Weather[]\r\n): SetCityCurrentWeather => ({\r\n  type: SET_CURRENT_WEATHER,\r\n  payload: {\r\n    cityId,\r\n    weather,\r\n    forecast,\r\n  },\r\n});\r\n\r\ninterface FetchCityCurrentWeather {\r\n  type: typeof FETCH_CURRENT_WEATHER;\r\n  cityId: string;\r\n}\r\n\r\nexport const fetchCityCurrentWeather = (\r\n  cityId: string\r\n): FetchCityCurrentWeather => ({\r\n  type: FETCH_CURRENT_WEATHER,\r\n  cityId,\r\n});\r\n\r\ninterface FetchCityCurrentWeatherPending {\r\n  type: typeof FETCH_CURRENT_WEATHER_PENDING;\r\n  id: string;\r\n}\r\n\r\nexport const fetchCityCurrentWeatherPending = (\r\n  id: string\r\n): FetchCityCurrentWeatherPending => ({\r\n  type: FETCH_CURRENT_WEATHER_PENDING,\r\n  id,\r\n});\r\n\r\ninterface FetchCityCurrentWeatherSuccess {\r\n  type: typeof FETCH_CURRENT_WEATHER_SUCCESS;\r\n  cityId: string;\r\n  payload: {\r\n    data?: OpOneCall;\r\n  };\r\n}\r\nexport const fetchCityCurrentWeatherSuccess = (\r\n  cityId: string\r\n): FetchCityCurrentWeatherSuccess => ({\r\n  type: FETCH_CURRENT_WEATHER_SUCCESS,\r\n  cityId,\r\n  payload: {\r\n    data: undefined,\r\n  },\r\n});\r\n\r\ninterface FetchCityCurrentWeatherError {\r\n  type: typeof FETCH_CURRENT_WEATHER_ERROR;\r\n  cityId: string;\r\n  payload: {\r\n    data: any;\r\n  };\r\n}\r\n\r\nexport const fetchCityCurrentWeatherError = (\r\n  cityId: string\r\n): FetchCityCurrentWeatherError => ({\r\n  type: FETCH_CURRENT_WEATHER_ERROR,\r\n  cityId,\r\n  payload: {\r\n    data: undefined,\r\n  },\r\n});\r\n\r\ninterface DeleteCity {\r\n  type: typeof DELETE_CITY;\r\n  cityId: string;\r\n}\r\n\r\nexport const deleteCity = (cityId: string): DeleteCity => ({\r\n  type: DELETE_CITY,\r\n  cityId,\r\n});\r\n\r\ninterface UpdateAllWeather {\r\n  type: typeof UPDATE_ALL_WEATHER;\r\n}\r\n\r\nexport const updateAllWeather = (): UpdateAllWeather => ({\r\n  type: UPDATE_ALL_WEATHER,\r\n});\r\n\r\nexport type CityActions =\r\n  | AddCity\r\n  | SetCityCurrentWeather\r\n  | FetchCityCurrentWeather\r\n  | FetchCityCurrentWeatherPending\r\n  | FetchCityCurrentWeatherSuccess\r\n  | FetchCityCurrentWeatherError\r\n  | UpdateAllWeather\r\n  | DeleteCity;\r\n","import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  makeStyles,\r\n  IconButton,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport { connect } from \"react-redux\";\r\nimport { getIsLoading } from \"app/selectors/ui\";\r\nimport { AppState } from \"app/types/AppState\";\r\nimport { updateAllWeather } from \"app/actions/cities\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  isLoading: boolean;\r\n  updateAllWeather: typeof updateAllWeather;\r\n}\r\n\r\nconst Header = ({ isLoading, updateAllWeather }: Props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Weather\r\n          </Typography>\r\n          {isLoading ? (\r\n            <CircularProgress color=\"secondary\" />\r\n          ) : (\r\n            <IconButton color=\"inherit\" onClick={updateAllWeather}>\r\n              <RefreshIcon />\r\n            </IconButton>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  isLoading: getIsLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = { updateAllWeather };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  IconButton,\r\n  Typography,\r\n  AppBar,\r\n  makeStyles,\r\n  Slide,\r\n  Toolbar,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  open: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  //@ts-ignore\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport const AddCityWindow: FC<Props> = ({\r\n  title,\r\n  open,\r\n  onClose,\r\n  children,\r\n}) => {\r\n  const classes = useStyles();\r\n  const isMobile = useMediaQuery(\"(max-width: 769px)\");\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      fullScreen={isMobile}\r\n      fullWidth={true}\r\n      onClose={onClose}\r\n      TransitionComponent={Transition as any}\r\n    >\r\n      <AppBar className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            onClick={onClose}\r\n            aria-label=\"close\"\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <DialogContent>{children}</DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n","import React, { useState, ChangeEvent, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport { CityDto, fetchDependencies } from \"./fetchDependencies\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { connect } from \"react-redux\";\r\nimport { addCity } from \"app/actions/cities\";\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    height: \"60vh\",\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  addCity: typeof addCity;\r\n}\r\n\r\nconst Body = ({ addCity }: Props) => {\r\n  const classes = useStyles();\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const [cities, setCities] = useState<CityDto[]>([]);\r\n\r\n  const handleOnChange = (\r\n    evt: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\r\n  ) => {\r\n    setSearch(evt.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDependencies().then(setCities);\r\n  }, []);\r\n\r\n  const maxNumberDisplayed = 25;\r\n  const list = cities\r\n    .filter((c) => c.name.toUpperCase().includes(search.toUpperCase()))\r\n    .slice(0, maxNumberDisplayed);\r\n\r\n  const lastItemText =\r\n    list.length === 0\r\n      ? \"Not found\"\r\n      : list.length < maxNumberDisplayed\r\n      ? \"\"\r\n      : \"...\";\r\n\r\n  const handleAdd = (id: number) => () => {\r\n    const city = cities[id];\r\n    addCity(city.name, city.lat, city.lng);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TextField\r\n        value={search}\r\n        onChange={handleOnChange}\r\n        fullWidth\r\n        autoFocus\r\n        margin=\"normal\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n\r\n      <List>\r\n        {list.map((c) => (\r\n          <ListItem\r\n            key={c.id}\r\n            onClick={handleAdd(c.id)}\r\n            button\r\n          >{`${c.name}, ${c.country}`}</ListItem>\r\n        ))}\r\n        <ListItem>{lastItemText}</ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDisptachToProps = {\r\n  addCity,\r\n};\r\n\r\nexport default connect(undefined, mapDisptachToProps)(Body);\r\n","type DataTuple = [string, string, number, number];\r\n\r\nexport interface CityDto {\r\n  id: number;\r\n  name: string;\r\n  country: string;\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\nexport const fetchDependencies = () => {\r\n  return fetch(\"cities.json\")\r\n    .then((response) => response.json())\r\n    .then((cities_data: DataTuple[]) => {\r\n      const cities: CityDto[] = (cities_data as DataTuple[]).map(\r\n        (c, index) => ({\r\n          id: index,\r\n          name: c[0],\r\n          country: c[1],\r\n          lat: c[2],\r\n          lng: c[3],\r\n        })\r\n      );\r\n      return cities;\r\n    });\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCityWindow } from \"./AddCityWindow\";\r\nimport Body from \"./Body\";\r\nimport { Fab, makeStyles } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(3),\r\n    bottom: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport const AddCity = () => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Fab\r\n        onClick={handleOpen}\r\n        color=\"primary\"\r\n        aria-label=\"add\"\r\n        className={classes.button}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n      <AddCityWindow title=\"Choose city\" open={open} onClose={handleClose}>\r\n        <Body />\r\n      </AddCityWindow>\r\n    </>\r\n  );\r\n};\r\n","import { AppState } from \"app/types/AppState\";\r\n\r\nconst getCitiesSlice = (state: AppState) => state.cities;\r\n\r\nexport const getCitiesIds = (state: AppState) =>\r\n  Object.keys(getCitiesSlice(state));\r\n\r\nexport const getCityById = (state: AppState, cityId: string) =>\r\n  getCitiesSlice(state)[cityId];\r\n","import {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { getCityById } from \"app/selectors/cities\";\r\nimport { AppState } from \"app/types/AppState\";\r\nimport { City } from \"app/types/City\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { deleteCity } from \"app/actions/cities\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  current: {\r\n    textAlign: \"center\",\r\n    fontSize: \"2em\",\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  id: string;\r\n  city: City;\r\n  deleteCity: typeof deleteCity;\r\n}\r\n\r\nconst CityCard = ({ city, deleteCity }: Props) => {\r\n  const classes = useStyles();\r\n\r\n  const handleDelete = () => deleteCity(city.id);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        title={city.name}\r\n        action={\r\n          <IconButton aria-label=\"delete-city\" onClick={handleDelete}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        }\r\n      />\r\n      <CardContent>\r\n        {city.currentWeather ? (\r\n          <div>\r\n            <div className={classes.current}>\r\n              {city.currentWeather?.temperature}\r\n            </div>\r\n            <Grid container spacing={2} justify=\"center\">\r\n              {city.forecast?.slice(1, 6).map((f, i) => (\r\n                <Grid item>\r\n                  <div>Today</div>\r\n                  <div>{f.temperature}</div>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </div>\r\n        ) : (\r\n          \"Loading\"\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState, { id }: { id: string }) => ({\r\n  city: getCityById(state, id),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  deleteCity,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CityCard);\r\n","import { Box, Grid } from \"@material-ui/core\";\r\nimport { getCitiesIds } from \"app/selectors/cities\";\r\nimport { AppState } from \"app/types/AppState\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CityCard from \"./CityCard\";\r\n\r\ninterface Props {\r\n  citiesIds: ReturnType<typeof getCitiesIds>;\r\n}\r\n\r\nexport const Main = ({ citiesIds }: Props) => {\r\n  return (\r\n    <Box m={4}>\r\n      <Grid container spacing={2}>\r\n        {citiesIds.map((cityId) => (\r\n          <Grid item key={cityId} xs={12} md={4}>\r\n            <CityCard id={cityId} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  citiesIds: getCitiesIds(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Main);\r\n","import React, { useEffect } from \"react\";\r\nimport Header from \"components/Header\";\r\nimport { AddCity } from \"components/AddCity\";\r\nimport Main from \"components/Main\";\r\nimport { initApp } from \"app/actions/initApp\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface Props {\r\n  initApp: typeof initApp;\r\n}\r\n\r\nfunction App({ initApp }: Props) {\r\n  useEffect(() => {\r\n    initApp();\r\n  }, [initApp]);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Main />\r\n      <AddCity />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  initApp,\r\n};\r\n\r\nexport default connect(undefined, mapDispatchToProps)(App);\r\n","import { INIT_APP } from \"app/constants/actions\";\r\n\r\nexport interface InitApp {\r\n  type: typeof INIT_APP;\r\n}\r\n\r\nexport const initApp = (): InitApp => ({\r\n  type: INIT_APP,\r\n});\r\n","import {\r\n  ADD_CITY,\r\n  DELETE_CITY,\r\n  SET_CURRENT_WEATHER,\r\n} from \"app/constants/actions\";\r\nimport { AppAction } from \"app/types/AppAction\";\r\nimport { City } from \"app/types/City\";\r\n\r\ninterface CitiesState {\r\n  [prop: string]: City;\r\n}\r\n\r\nconst initialState: CitiesState = {};\r\n\r\nexport const citiesReducer = (\r\n  state = initialState,\r\n  action: AppAction\r\n): CitiesState => {\r\n  switch (action.type) {\r\n    case ADD_CITY: {\r\n      const city = action.city;\r\n      return { ...state, [city.id]: city };\r\n    }\r\n\r\n    case SET_CURRENT_WEATHER: {\r\n      const { cityId, weather, forecast } = action.payload;\r\n      return {\r\n        ...state,\r\n        [cityId]: { ...state[cityId], currentWeather: weather, forecast },\r\n      };\r\n    }\r\n\r\n    case DELETE_CITY: {\r\n      const cityId = action.cityId;\r\n      const newState = { ...state };\r\n      delete newState[cityId];\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { API_START, API_END } from \"app/constants/actions\";\r\nimport { AppAction } from \"app/types/AppAction\";\r\n\r\ninterface UiState {\r\n  requests: number;\r\n}\r\n\r\nconst initialState: UiState = {\r\n  requests: 0,\r\n};\r\n\r\nexport const uiReducer = (state = initialState, action: AppAction): UiState => {\r\n  switch (action.type) {\r\n    case API_START:\r\n      return { ...state, requests: state.requests + 1 };\r\n\r\n    case API_END:\r\n      return { ...state, requests: state.requests - 1 };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { citiesReducer } from \"./cities\";\r\nimport { uiReducer } from \"./ui\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  cities: citiesReducer,\r\n  ui: uiReducer,\r\n});\r\n","import { API_END, API_START } from \"app/constants/actions\";\r\nimport { AppAction, ActionConstant } from \"app/types/AppAction\";\r\n\r\ntype method = \"GET\" | \"POST\";\r\n\r\nexport interface ActionWithDataPayload {\r\n  type: ActionConstant;\r\n  payload: {\r\n    data?: any;\r\n  };\r\n}\r\n\r\nexport interface ApiStart {\r\n  type: typeof API_START;\r\n  payload: {\r\n    url: string;\r\n    method: method;\r\n    data?: {};\r\n    pending: AppAction;\r\n    success: ActionWithDataPayload;\r\n    error: ActionWithDataPayload;\r\n  };\r\n}\r\n\r\nconst get: (\r\n  url: string,\r\n  pending: AppAction,\r\n  success: ActionWithDataPayload,\r\n  error: ActionWithDataPayload\r\n) => ApiStart = (url, pending, success, error) => ({\r\n  type: API_START,\r\n  payload: { url, method: \"GET\", pending, success, error },\r\n});\r\n\r\nexport const api = {\r\n  get,\r\n};\r\n\r\nexport interface ApiEnd {\r\n  type: typeof API_END;\r\n}\r\n\r\nexport const apiEnd = (): ApiEnd => ({ type: API_END });\r\n\r\nexport type ApiActions = ApiStart | ApiEnd;\r\n","import { fetchWeatherMdl } from \"./app/fetchWeather\";\r\nimport { apiMdl } from \"./core/api\";\r\nimport { multiMdl } from \"./core/multi\";\r\nimport { updateWeatherMdl } from \"./app/updateWeather\";\r\nimport { initAppMdl } from \"./app/initApp\";\r\n\r\nexport const middleware = [\r\n  multiMdl,\r\n  apiMdl,\r\n  initAppMdl,\r\n  fetchWeatherMdl,\r\n  updateWeatherMdl,\r\n];\r\n","import { MULTI } from \"app/constants/actions\";\r\nimport { Middleware } from \"../Middleware\";\r\n\r\nexport const multiMdl: Middleware = ({ dispatch }) => (next) => (action) => {\r\n  next(action);\r\n  if (action.type === MULTI) {\r\n    action.actions.forEach((a) => dispatch(a));\r\n  }\r\n};\r\n","import { API_START } from \"app/constants/actions\";\r\nimport { Middleware } from \"../Middleware\";\r\nimport { API_URL } from \"app/constants/urls\";\r\nimport { AppAction } from \"app/types/AppAction\";\r\nimport { apiEnd } from \"app/actions/api\";\r\n\r\nexport const apiMdl: Middleware = ({ dispatch }) => (next) => (action) => {\r\n  next(action);\r\n\r\n  if (action.type === API_START) {\r\n    const { method, pending, success, error, data, url } = action.payload;\r\n    const payload = action.payload;\r\n    const options = {\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data) || undefined,\r\n    };\r\n\r\n    dispatch(pending);\r\n    fetch(\r\n      encodeURI(API_URL + url + \"&appid=5d2145b1e3153ce2a87bbad571a98ba4\"),\r\n      options\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        payload.success.payload.data = data;\r\n        dispatch(success as AppAction);\r\n      })\r\n      .catch((err) => {\r\n        error.payload.data = err;\r\n        dispatch(error as AppAction);\r\n      })\r\n      .then(() => dispatch(apiEnd()));\r\n  }\r\n};\r\n","export const API_URL =\r\n  \"https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5\";\r\n","import { addCity } from \"app/actions/cities\";\r\nimport { INIT_APP } from \"app/constants/actions\";\r\nimport { Middleware } from \"../Middleware\";\r\n\r\nexport const initAppMdl: Middleware = ({ dispatch }) => (next) => (action) => {\r\n  next(action);\r\n\r\n  if (action.type === INIT_APP) {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const { latitude, longitude } = position.coords;\r\n      dispatch(addCity(\"Current\", latitude, longitude));\r\n    });\r\n  }\r\n};\r\n","import {\r\n  ADD_CITY,\r\n  FETCH_CURRENT_WEATHER,\r\n  FETCH_CURRENT_WEATHER_SUCCESS,\r\n} from \"app/constants/actions\";\r\nimport { Middleware } from \"../Middleware\";\r\nimport { api } from \"app/actions/api\";\r\nimport {\r\n  fetchCityCurrentWeather,\r\n  fetchCityCurrentWeatherPending,\r\n  fetchCityCurrentWeatherSuccess,\r\n  fetchCityCurrentWeatherError,\r\n  setCityCurrentWeather,\r\n} from \"app/actions/cities\";\r\nimport { Weather } from \"app/types/Weather\";\r\nimport { getCityById } from \"app/selectors/cities\";\r\n\r\nexport const fetchWeatherMdl: Middleware = ({ dispatch, getState }) => (\r\n  next\r\n) => (action) => {\r\n  next(action);\r\n\r\n  if (action.type === ADD_CITY) {\r\n    dispatch(fetchCityCurrentWeather(action.city.id));\r\n  }\r\n\r\n  if (action.type === FETCH_CURRENT_WEATHER) {\r\n    const { cityId } = action;\r\n    const pending = fetchCityCurrentWeatherPending(cityId);\r\n    const success = fetchCityCurrentWeatherSuccess(cityId);\r\n    const error = fetchCityCurrentWeatherError(cityId);\r\n\r\n    const [lat, lon] = cityId.split(\",\");\r\n    dispatch(\r\n      api.get(\r\n        `/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts`,\r\n        pending,\r\n        success,\r\n        error\r\n      )\r\n    );\r\n  }\r\n\r\n  if (action.type === FETCH_CURRENT_WEATHER_SUCCESS) {\r\n    const {\r\n      cityId,\r\n      payload: { data },\r\n    } = action;\r\n    const weather: Weather = { temperature: data!.current.temp };\r\n    const forecast: Weather[] = data!.daily.map((f) => ({\r\n      temperature: f.temp.day,\r\n    }));\r\n\r\n    const cityExists = getCityById(getState(), cityId);\r\n    if (cityExists) {\r\n      dispatch(setCityCurrentWeather(cityId, weather, forecast));\r\n    }\r\n  }\r\n};\r\n","import { fetchCityCurrentWeather } from \"app/actions/cities\";\r\nimport { multi } from \"app/actions/multi\";\r\nimport { UPDATE_ALL_WEATHER } from \"app/constants/actions\";\r\nimport { getCitiesIds } from \"app/selectors/cities\";\r\nimport { Middleware } from \"../Middleware\";\r\n\r\nexport const updateWeatherMdl: Middleware = ({ dispatch, getState }) => (\r\n  next\r\n) => (action) => {\r\n  next(action);\r\n\r\n  if (action.type === UPDATE_ALL_WEATHER) {\r\n    dispatch(\r\n      multi(\r\n        getCitiesIds(getState()).map((cityId) =>\r\n          fetchCityCurrentWeather(cityId)\r\n        )\r\n      )\r\n    );\r\n  }\r\n};\r\n","import { MULTI } from \"app/constants/actions\";\r\nimport { AppAction } from \"app/types/AppAction\";\r\n\r\nexport interface Multi {\r\n  type: typeof MULTI;\r\n  actions: AppAction[];\r\n}\r\n\r\nexport const multi = (actions: AppAction[]): Multi => ({\r\n  type: MULTI,\r\n  actions,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { rootReducer } from \"app/reducers/root\";\r\nimport { middleware } from \"app/middleware\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"fontsource-roboto\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  const { worker } = require(\"./mocks/browser\");\r\n  worker.start();\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}